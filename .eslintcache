[{"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\index.js":"1","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\views\\Home\\index.js":"2","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\Header\\index.js":"3","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\views\\Home\\styles.js":"4","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\Header\\styles.js":"5","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\Footer\\index.js":"6","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\Footer\\styles.js":"7","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\FilterCard\\index.js":"8","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\FilterCard\\styles.js":"9","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\TaskCard\\index.js":"10","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\TaskCard\\styles.js":"11","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\services\\api.js":"12","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\utils\\typeicons.js":"13","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\views\\Task\\index.js":"14","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\views\\Task\\styles.js":"15","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\routes\\index.js":"16","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\views\\QrCode\\index.js":"17","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\views\\QrCode\\styles.js":"18"},{"size":206,"mtime":1610115964731,"results":"19","hashOfConfig":"20"},{"size":3245,"mtime":1610135077969,"results":"21","hashOfConfig":"20"},{"size":1752,"mtime":1610135354452,"results":"22","hashOfConfig":"20"},{"size":1030,"mtime":1610121080882,"results":"23","hashOfConfig":"20"},{"size":1164,"mtime":1609346165241,"results":"24","hashOfConfig":"20"},{"size":246,"mtime":1609113647303,"results":"25","hashOfConfig":"20"},{"size":298,"mtime":1609114273494,"results":"26","hashOfConfig":"20"},{"size":354,"mtime":1609116430443,"results":"27","hashOfConfig":"20"},{"size":505,"mtime":1609116395419,"results":"28","hashOfConfig":"20"},{"size":965,"mtime":1610121274648,"results":"29","hashOfConfig":"20"},{"size":944,"mtime":1610121339658,"results":"30","hashOfConfig":"20"},{"size":148,"mtime":1609330365670,"results":"31","hashOfConfig":"20"},{"size":721,"mtime":1609344236044,"results":"32","hashOfConfig":"20"},{"size":6231,"mtime":1610135158400,"results":"33","hashOfConfig":"20"},{"size":2050,"mtime":1610048754035,"results":"34","hashOfConfig":"20"},{"size":651,"mtime":1610133053473,"results":"35","hashOfConfig":"20"},{"size":956,"mtime":1610136144311,"results":"36","hashOfConfig":"20"},{"size":1139,"mtime":1610136526953,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1b2x6x9",{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\index.js",[],["78","79"],"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\views\\Home\\index.js",["80","81"],"import React, {useState, useEffect} from 'react';\r\nimport * as S from './styles';\r\n\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport api from '../../services/api'; // conexao com BD via API\r\n\r\n// Components\r\nimport Header from '../../components/Header';\r\nimport Footer from '../../components/Footer';\r\nimport FilterCard from '../../components/FilterCard';\r\nimport TaskCard from '../../components/TaskCard';\r\n\r\n\r\nfunction Home() {\r\n    const [filterActived, setFilterActived] = useState('all');\r\n    const [tasks, setTasks] = useState([]); // [] para guardar varias informaçoes\r\n    // const [lateCount, setLateCount] = useState(); // armazenar a quantidade de tarefas em atraso\r\n\r\n    // funçao para carregar as informaçoes das tarefas da BD, atraves de filtros\r\n    async function loadTasks(){\r\n        await api.get(`/task/filter/${filterActived}/11-11-11-11-11-11`)\r\n        .then(response => {\r\n            setTasks(response.data);\r\n            //console.log(response.data);\r\n        })\r\n    }\r\n\r\n    /*\r\n    // quantidade de tarefas em atraso\r\n    async function lateVerify(){\r\n            await api.get(`/task/filter/late/11-11-11-11-11-11`)\r\n            .then(response => {\r\n                setLateCount(response.data.length);\r\n            })\r\n    }\r\n    */\r\n\r\n    // para ter o onclick no sino de notificaçoes atrasadas\r\n    function Notification(){\r\n        setFilterActived('late');\r\n    }\r\n\r\n    // carregar tarefas ecra\r\n    useEffect(() => {\r\n        loadTasks(); // carregar todas as tarefas no ecra\r\n        // lateVerify(); // carregar as tarefas em atraso no \"sino\" de notificação\r\n    }, [filterActived]) // sempre que o estado mudar ->filterActived, tambem recarrega o ecra\r\n\r\n\r\n    return (\r\n    <S.Container>\r\n    <Header clickNotification={Notification}/>\r\n\r\n    <S.FilterArea>\r\n        <button type=\"button\" onClick={()=> setFilterActived(\"all\")}   >\r\n        <FilterCard title=\"Todos\"   actived={filterActived === 'all'} />\r\n        </button>\r\n\r\n        <button type=\"button\" onClick={()=> setFilterActived(\"today\")}   >\r\n        <FilterCard title=\"Hoje\"    actived={filterActived === 'today'} />\r\n        </button>\r\n\r\n        <button type=\"button\" onClick={()=> setFilterActived(\"week\")}   >\r\n        <FilterCard title=\"Semana\"  actived={filterActived === 'week'} />\r\n        </button>\r\n\r\n        <button type=\"button\" onClick={()=> setFilterActived(\"month\")}   >\r\n        <FilterCard title=\"Mês\"     actived={filterActived === 'month'} />\r\n        </button>\r\n\r\n        <button type=\"button\" onClick={()=> setFilterActived(\"year\")}   >\r\n        <FilterCard title=\"Ano\"     actived={filterActived === 'year'} />\r\n        </button>\r\n    </S.FilterArea>\r\n\r\n    <S.Title>\r\n        <h3>{filterActived == 'late' ? 'TAREFAS ATRASADAS' : 'TAREFAS'}</h3>\r\n    </S.Title>\r\n\r\n\r\n\r\n    <S.Content>\r\n       {\r\n           // map percorre item por item dentro da coleçao\r\n           // _id porque é dessa forma que o mongoDB armazena o campo\r\n        tasks.map(t => ( \r\n            <Link to={`/task/${t._id}`}>\r\n        <TaskCard type={t.type} title={t.title} when={t.when} done={t.done} />\r\n        </Link>\r\n        ))\r\n       }\r\n    </S.Content>\r\n    \r\n    <Footer/>\r\n    </S.Container>\r\n\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\Header\\index.js",[],"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\views\\Home\\styles.js",[],"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\Header\\styles.js",[],"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\Footer\\index.js",[],"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\Footer\\styles.js",[],"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\FilterCard\\index.js",[],"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\FilterCard\\styles.js",[],"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\TaskCard\\index.js",["82","83"],"import React, {useMemo} from 'react'; // vai auxiliar a separar data e hora de when -> useMemo\r\nimport {format} from 'date-fns'; // para formatar data e hora\r\nimport * as S from './styles';\r\n\r\nimport typeIcons from '../../utils/typeicons';\r\n\r\n// import iconDefault from '../../assets/default.png';\r\n\r\nfunction TaskCard({type, title, when, done}) {\r\n    const date = useMemo(() => format(new Date(when), 'dd/MM/yyyy' ) ); // converter when (que está em string) para formato de data e hora\r\n    const hour = useMemo(() => format(new Date(when), 'HH:mm' ) );\r\n\r\n    return (\r\n\r\n        <S.Container done={done}>\r\n            <S.TopCard>\r\n                <img src={typeIcons[type]} alt=\"Icone da Tarefa\"/>\r\n                <h3>{title}</h3>\r\n            </S.TopCard>\r\n            <S.BottomCard>\r\n                <strong>{date}</strong>\r\n                <span>{hour}</span>\r\n\r\n            </S.BottomCard>\r\n        </S.Container>\r\n\r\n    )\r\n}\r\n\r\nexport default TaskCard;\r\n","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\components\\TaskCard\\styles.js",[],"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\services\\api.js",[],"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\utils\\typeicons.js",[],"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\views\\Task\\index.js",["84","85","86","87","88"],"import React, {useState, useEffect} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport * as S from './styles';\r\n\r\nimport {format} from 'date-fns';\r\n\r\nimport api from '../../services/api'; // conexao com BD via API\r\n\r\n// Components\r\nimport Header from '../../components/Header';\r\nimport Footer from '../../components/Footer';\r\nimport TypeIcons from '../../utils/typeicons';\r\n\r\nimport iconCalendar from '../../assets/calendar.png';\r\nimport iconClock from '../../assets/clock.png';\r\n\r\n// match vem com as infos de parametros de navegação (URL) -> obtençao do ID pelo URL\r\nfunction Task({match}) {\r\n    const [redirect, setRedirect] = useState(false);\r\n    // const [lateCount, setLateCount] = useState(); // armazenar a quantidade de tarefas em atraso\r\n    const [type, setType] = useState(); // tipo da tarefa\r\n    const [id , setId] = useState(); // guardar ID tarefa\r\n    const [done, setDone] = useState(false); // tarefa concluida ou nao -> por padrao inicia a false (nao concluida)\r\n    const [title, setTitle] = useState();\r\n    const [description, setDescription] = useState();\r\n    const [date, setDate] = useState();\r\n    const [hour, setHour] = useState();\r\n    const [macaddress, setMacaddress] = useState('11-11-11-11-11-11');\r\n\r\n    /*\r\n        // quantidade de tarefas em atraso\r\n        async function lateVerify(){\r\n                await api.get(`/task/filter/late/11-11-11-11-11-11`)\r\n                .then(response => {\r\n                    setLateCount(response.data.length);\r\n                })\r\n        }\r\n    */\r\n\r\n    // carregar as infos da API\r\n    async function LoadTaskDetails(){\r\n        await api.get(`/task/${match.params.id}`)\r\n        .then(response => { \r\n            setType(response.data.type)\r\n            setDone(response.data.done)\r\n            setTitle(response.data.title)\r\n            setDescription(response.data.description)\r\n            setDate( format(new Date(response.data.when), 'yyyy-MM-dd'))\r\n            setHour( format(new Date(response.data.when), 'HH:mm' ))\r\n        })\r\n    }\r\n\r\n\r\n    // editar ou registar nova tarefa pela API\r\n    async function Save(){\r\n        // validação dos dados\r\n        if(!title)\r\n            return alert(\"Precisa de informar o título da tarefa\");\r\n        else if(!description)\r\n            return alert(\"Precisa de informar a descrição\");\r\n        else if(!type)\r\n            return alert(\"Precisa de informar o tipo da tarefa\");\r\n        else if(!date)\r\n            return alert(\"Introduza uma data válida\");\r\n        else if(!hour)\r\n            return alert(\"Introduza uma hora válida\");\r\n\r\n\r\n        // se existe id entao atualiza senao regista nova tarefa\r\n        if(match.params.id) {\r\n            await api.put(`/task/${match.params.id}`, {\r\n                macaddress,\r\n                done,\r\n                type,\r\n                title,\r\n                description,\r\n                when: `${date}T${hour}:00.000` // para ficar no padrao do mongoDB\r\n            }).then(() => setRedirect(true)\r\n            ).catch((error) => {\r\n                alert('Erro ' + error); // adicionei aqui\r\n              });\r\n        } else {\r\n            await api.post('/task', {\r\n                macaddress,\r\n                type,\r\n                title,\r\n                description,\r\n                when: `${date}T${hour}:00.000` // para ficar no padrao do mongoDB\r\n            }).then(() => setRedirect(true)\r\n            ).catch((error) => {\r\n                alert('Error ' + error); // adicionei aqui\r\n              });\r\n          }\r\n        }\r\n\r\n\r\n        // remover tarefas\r\n        async function Remove(){\r\n            const res = window.confirm('Deseja realmente remover a tarefa?')\r\n            if(res == true ){\r\n              api.delete(`/task/${match.params.id}`)\r\n              .then( () => setRedirect(true));                     \r\n            }\r\n        }\r\n\r\n    // carregar tarefas ecra\r\n    useEffect(() => {\r\n        // lateVerify(); // carregar as tarefas em atraso no \"sino\" de notificação\r\n        LoadTaskDetails();\r\n    }, []) \r\n\r\n    return (\r\n    <S.Container>\r\n       {redirect && <Redirect to=\"/\" /> }\r\n    <Header />\r\n\r\n\r\n    <S.Form>\r\n\r\n        <S.TypeIcons>\r\n            {\r\n                // para cada icon que encontrar, é gerado um elemento\r\n                TypeIcons.map((icon, index) => (\r\n                    index > 0 && \r\n                    // o index [0] está como null\r\n                    <button type=\"button\" onClick={() => setType(index)}>\r\n                    <img src={icon} alt=\"Tipo da Tarefa\" \r\n                    className={type && type !== index && 'inactive'} /> \r\n                    </button>\r\n                ))\r\n            }\r\n        </S.TypeIcons>\r\n\r\n        <S.Input>\r\n            <span>Título</span>\r\n            <input type=\"text\" placeholder=\"Título da tarefa...\" \r\n            onChange={e => setTitle(e.target.value)} value={title} />\r\n        </S.Input>\r\n\r\n        <S.TextArea>\r\n            <span>Descrição</span>\r\n            <textarea rows={5} placeholder=\"Detalhes da tarefa...\" \r\n            onChange={e => setDescription(e.target.value)} value={description} />\r\n        </S.TextArea>\r\n\r\n        <S.Input>\r\n            <span>Data</span>\r\n            <input type=\"date\" placeholder=\"Título da tarefa...\" \r\n            onChange={e => setDate(e.target.value)} value={date} />\r\n            <img src={iconCalendar} alt=\"Calendário\"/>\r\n        </S.Input>\r\n\r\n        <S.Input>\r\n            <span>Hora</span>\r\n            <input type=\"time\" placeholder=\"Título da tarefa...\" \r\n            onChange={e => setHour(e.target.value)} value={hour} />\r\n            <img src={iconClock} alt=\"Relógio\"/>\r\n        </S.Input>\r\n\r\n        <S.Options>\r\n            <div>\r\n                \r\n                <input type=\"checkbox\" checked={done} onChange={() => setDone(!done)} />\r\n                <span>CONCLUÍDO</span>\r\n            </div>\r\n            { match.params.id && <button type=\"button\" onClick={Remove}>Excluír</button>}\r\n        </S.Options>\r\n\r\n        <S.Save>\r\n            <button type=\"button\" onClick={Save} >GRAVAR</button>\r\n        </S.Save>\r\n\r\n\r\n\r\n    </S.Form>\r\n\r\n\r\n\r\n\r\n    <Footer/>\r\n    </S.Container>\r\n\r\n    )\r\n}\r\n\r\nexport default Task;\r\n","C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\views\\Task\\styles.js",[],"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\routes\\index.js",[],"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\views\\QrCode\\index.js",["89","90"],"C:\\Users\\Danie\\Desktop\\nodereacproj\\web\\web\\src\\views\\QrCode\\styles.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":48,"column":8,"nodeType":"97","endLine":48,"endColumn":23,"suggestions":"98"},{"ruleId":"99","severity":1,"message":"100","line":78,"column":28,"nodeType":"101","messageId":"102","endLine":78,"endColumn":30},{"ruleId":"95","severity":1,"message":"103","line":10,"column":18,"nodeType":"104","endLine":10,"endColumn":25},{"ruleId":"95","severity":1,"message":"103","line":11,"column":18,"nodeType":"104","endLine":11,"endColumn":25},{"ruleId":"105","severity":1,"message":"106","line":23,"column":12,"nodeType":"104","messageId":"107","endLine":23,"endColumn":14},{"ruleId":"105","severity":1,"message":"108","line":23,"column":17,"nodeType":"104","messageId":"107","endLine":23,"endColumn":22},{"ruleId":"105","severity":1,"message":"109","line":29,"column":24,"nodeType":"104","messageId":"107","endLine":29,"endColumn":37},{"ruleId":"99","severity":1,"message":"100","line":101,"column":20,"nodeType":"101","messageId":"102","endLine":101,"endColumn":22},{"ruleId":"95","severity":1,"message":"110","line":111,"column":8,"nodeType":"97","endLine":111,"endColumn":10,"suggestions":"111"},{"ruleId":"105","severity":1,"message":"112","line":1,"column":16,"nodeType":"104","messageId":"107","endLine":1,"endColumn":24},{"ruleId":"105","severity":1,"message":"113","line":1,"column":26,"nodeType":"104","messageId":"107","endLine":1,"endColumn":35},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadTasks'. Either include it or remove the dependency array.","ArrayExpression",["116"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","Identifier","no-unused-vars","'id' is assigned a value but never used.","unusedVar","'setId' is assigned a value but never used.","'setMacaddress' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'LoadTaskDetails'. Either include it or remove the dependency array.",["117"],"'useState' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [filterActived, loadTasks]",{"range":"122","text":"123"},"Update the dependencies array to be: [LoadTaskDetails]",{"range":"124","text":"125"},[1607,1622],"[filterActived, loadTasks]",[4046,4048],"[LoadTaskDetails]"]